{"version":3,"file":"detached-loader.d.ts","sources":["detached-loader.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { ComponentRef, ComponentFactory, ViewContainerRef, Type, ComponentFactoryResolver, ChangeDetectorRef } from '@angular/core';\n/**\n * Wrapper component used for loading components when navigating\n * It uses DetachedContainer as selector so that it is containerRef is not attached to\n * the visual tree.\n */\nexport declare class DetachedLoader {\n    private resolver;\n    private changeDetector;\n    private containerRef;\n    constructor(resolver: ComponentFactoryResolver, changeDetector: ChangeDetectorRef, containerRef: ViewContainerRef);\n    private loadInLocation;\n    detectChanges(): void;\n    loadComponent(componentType: Type<any>): Promise<ComponentRef<any>>;\n    loadWithFactory<T>(factory: ComponentFactory<T>): ComponentRef<T>;\n}\n"]}